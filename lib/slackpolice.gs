// Generated by CoffeeScript 1.12.0

/**
 * @type {number}
 */
var DATATYPE_NEW_CHANNEL = 1;

/**
 * @type {number}
 */
var DATATYPE_PURPOSE = 2;

/**
 * @type {number}
 */
var DATATYPE_TOPIC = 3;

/**
 * @type {number}
 */
var DATATYPE_ARCHIVE = 4;

/**
 * Get Slack Police Instance.
 * @param {Sheet} sheet - sheet for data storage
 * @param {string} token - Slack API token
 * @return {SlackPolice} return Slack Police Instance
 */
function getInstance(sheet, token) {
  return new SlackPolice(sheet, token);
}

/**
 * 利用するデータタイプを追加
 * @param {number} column - Data storage column
 * @param {string} message - message
 * @param {number} dataType - DataType
 * @return {SlackPolice} return Slack Police Instance
 */
function addDataType(column, message, dataType) {

}

/**
 * Debug mode <br>
 * Slack に投稿されずに Logger.log で結果が出力されます
 * @param {boolean} debug - use debug mode
 * @return {SlackPolice} return Slack Police Instance
 */
function setDebug(debug) {

}

/**
 * As User
 * if you use Slack Bot, this flag must be true.
 * @param {boolean} asUser
 * @return {SlackPolice} return Slack Police Instance
 */
 function setAsUser(asUser) {

 }

/**
 * Setting custom username <br>
 * default username is "Slack警察"
 * @param {string} username - custom username
 * @return {SlackPolice} return Slack Police Instance
 */
function setUsername(username) {

}

/**
 * Setting custom icon_emoji <br>
 * default icon_emoji is ":cop:"
 * @param {string} icon_emoji - custom icon_emoji
 * @return {SlackPolice} return Slack Police Instance
 */
function setIconEmoji(iconEmoji) {

}

/**
 * Setting slack channel name <br>
 * @param {string} channel - it needs "#".
 * @return {SlackPolice} return Slack Police Instance
 */
function setChannel(channel) {

}

/**
 * find data from sheet data array.
 */
Array.prototype.findIndex = function(search) {
  if (search == "") {
    return false;
  }
  for (var i = 0; i < this.length; i++) {
    if (this[i] == search) {
      return i;
    }
  }
  return -1;
}

Array.prototype.findChannelName = function(search) {
  if (search == "") {
    return false;
  }
  for (var i = 0; i < this.length; i++) {
    if (this[i].name == search) {
      return i;
    }
  }
  return -1;
}
;
(function(exports) {
  var Police;
  Police = (function() {
    function Police(sheet1) {
      this.sheet = sheet1;
      this.queries = [];
      this.baseList = [];
    }

    Police.prototype.addDataType = function(column, message, dataType) {
      this.queries.push(new Query(column, message, dataType));
      return this;
    };

    Police.prototype.patrol = function(channels, excludes) {
      this.init_();
      this.checkChannels_(channels);
      return this.queries;
    };

    Police.prototype.init_ = function() {
      var i, ignore, json, len, ref;
      ref = this.sheet.getRange(1, 1, this.sheet.getLastRow() !== 0 ? this.sheet.getLastRow() : 1).getValues();
      for (i = 0, len = ref.length; i < len; i++) {
        json = ref[i];
        try {
          this.baseList.push(JSON.parse(json));
        } catch (error) {
          ignore = error;
        }
      }
      return this.sheet.clear();
    };

    Police.prototype.checkChannels_ = function(channels) {
      var channel, i, len, results, row;
      results = [];
      for (row = i = 0, len = channels.length; i < len; row = ++i) {
        channel = channels[row];
        if (channel.is_channel) {
          results.push(this.checkChannel_(channel, row));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Police.prototype.checkChannel_ = function(channel, row) {
      var dataType, i, index, len, newChannel, query, ref;
      index = -1;
      newChannel = this.getQuery_(DATATYPE_NEW_CHANNEL);
      index = newChannel ? newChannel.compare(this.baseList, 0, channel) : -1;
      if (index !== -1) {
        ref = [DATATYPE_PURPOSE, DATATYPE_TOPIC, DATATYPE_ARCHIVE];
        for (i = 0, len = ref.length; i < len; i++) {
          dataType = ref[i];
          query = this.getQuery_(dataType);
          if (query && query.compare(this.baseList, index, channel)) {
            query.updatedList.push(channel);
          }
        }
      } else {
        newChannel.updatedList.push(channel);
      }
      return this.save_(row + 1, 1, channel);
    };

    Police.prototype.getQuery_ = function(dataType) {
      var i, len, query, ref;
      ref = this.queries;
      for (i = 0, len = ref.length; i < len; i++) {
        query = ref[i];
        if (query.dataType === dataType) {
          return query;
        }
      }
    };

    Police.prototype.save_ = function(row, column, value) {
      return this.sheet.getRange(row, column).setValue(JSON.stringify(value));
    };

    return Police;

  })();
  return exports.Police = Police;
})(this);

(function(exports) {
  var Query;
  Query = (function() {
    function Query(column1, message1, dataType1) {
      this.column = column1;
      this.message = message1;
      this.dataType = dataType1;
      this.updatedList = [];
    }

    Query.prototype.isShowPurpose_ = function() {
      return this.dataType === DATATYPE_NEW_CHANNEL || this.dataType === DATATYPE_PURPOSE;
    };

    Query.prototype.isShowTopic_ = function() {
      return this.dataType === DATATYPE_NEW_CHANNEL || this.dataType === DATATYPE_TOPIC;
    };

    Query.prototype.createMessage = function(excludes) {
      var channel, i, len, ref, text;
      if (excludes == null) {
        excludes = null;
      }
      text = this.message;
      ref = this.updatedList;
      for (i = 0, len = ref.length; i < len; i++) {
        channel = ref[i];
        if (excludes && excludes.findIndex(channel.name) !== -1) {
          continue;
        }
        text = text + "\n#" + channel.name;
        if (this.isShowPurpose_()) {
          text = text + " " + channel.purpose.value;
        }
        if (this.isShowTopic_()) {
          text = text + " " + channel.topic.value;
        }
      }
      return text;
    };

    Query.prototype.compare = function(baseList, index, channel) {
      switch (this.dataType) {
        case DATATYPE_NEW_CHANNEL:
          return baseList.findChannelName(channel.name);
        case DATATYPE_PURPOSE:
          return baseList[index].purpose.last_set !== channel.purpose.last_set;
        case DATATYPE_TOPIC:
          return baseList[index].topic.last_set !== channel.topic.last_set;
        case DATATYPE_ARCHIVE:
          return !channel.is_archived && channel.num_members === 0;
      }
    };

    return Query;

  })();
  return exports.Query = Query;
})(this);

(function(exports) {
  var Slack;
  Slack = (function() {
    function Slack(token) {
      this.token = token;
      this.BASE_URL = "https://slack.com";
      this.API_ENDPOINT = this.BASE_URL + "/api/";
      this.debug = false;
      this.asUser = false;
    }

    Slack.prototype.setDebug = function(debug) {
      this.debug = debug;
      return this;
    };

    Slack.prototype.setAsUser = function(asUser) {
      this.asUser = asUser;
      return this;
    };

    Slack.prototype.chatPost = function(text, channel, username, iconEmoji) {
      var payload;
      if (channel == null) {
        channel = null;
      }
      if (username == null) {
        username = null;
      }
      if (iconEmoji == null) {
        iconEmoji = null;
      }
      if (this.debug || !channel) {
        return Logger.log(text);
      } else {
        payload = {
          channel: channel,
          text: text,
          parse: "full"
        };
        if (this.asUser) {
          payload.as_user = this.asUser;
        } else {
          payload.username = username ? username : "Slack警察";
          payload.icon_emoji = iconEmoji ? iconEmoji : ":cop:";
        }
        return this.request_("chat.postMessage", payload);
      }
    };

    Slack.prototype.channelsList = function() {
      return this.request_("channels.list");
    };

    Slack.prototype.request_ = function(resource, payload) {
      var params, response;
      if (payload == null) {
        payload = {};
      }
      payload.token = this.token;
      params = {
        method: "POST",
        payload: payload
      };
      response = UrlFetchApp.fetch("" + this.API_ENDPOINT + resource, params);
      return JSON.parse(response.getContentText());
    };

    return Slack;

  })();
  return exports.Slack = Slack;
})(this);

(function(exports) {
  var SlackPolice;
  SlackPolice = (function() {
    function SlackPolice(sheet1, token) {
      this.sheet = sheet1;
      this.token = token;
      this.debug = false;
      this.channel = null;
      this.username = null;
      this.iconEmoji = null;
      this.api = new Slack(this.token);
      this.police = new Police(this.sheet);
      this.asUser = false;
    }

    SlackPolice.prototype.setDebug = function(debug) {
      this.debug = debug;
      this.api.setDebug(debug);
      return this;
    };

    SlackPolice.prototype.setAsUser = function(asUser) {
      this.asUser = asUser;
      this.api.setAsUser(asUser);
      return this;
    };

    SlackPolice.prototype.setChannel = function(channel) {
      this.channel = channel;
      return this;
    };

    SlackPolice.prototype.setUsername = function(username) {
      this.username = username;
      return this;
    };

    SlackPolice.prototype.setIconEmoji = function(iconEmoji) {
      this.iconEmoji = iconEmoji;
      return this;
    };

    SlackPolice.prototype.addDataType = function(column, message, dataType) {
      this.police.addDataType(column, message, dataType);
      return this;
    };

    SlackPolice.prototype.patrol = function(excludeSheet, excludeSheetRowFirstIndex) {
      var channels, queries;
      if (excludeSheet == null) {
        excludeSheet = null;
      }
      if (excludeSheetRowFirstIndex == null) {
        excludeSheetRowFirstIndex = 1;
      }
      channels = this.api.channelsList().channels;
      queries = this.police.patrol(channels);
      this.showMessages_(queries, channels, excludeSheet, excludeSheetRowFirstIndex);
      return true;
    };

    SlackPolice.prototype.showMessages_ = function(queries, channels, excludeSheet, excludeSheetRowFirstIndex) {
      var i, len, query;
      for (i = 0, len = queries.length; i < len; i++) {
        query = queries[i];
        if (query.updatedList.length > 0 && query.updatedList.length !== channels.length) {
          this.showMessage_(query);
        }
      }
      return this;
    };

    SlackPolice.prototype.showMessage_ = function(query, excludeSheet, excludeSheetRowFirstIndex) {
      var excludes, message;
      if (excludeSheet) {
        excludes = this.excludeList_(excludeSheet, excludeSheetRowFirstIndex, query.column);
      }
      message = query.createMessage(excludes);
      if (message !== query.message) {
        this.api.chatPost(message, this.channel, this.username, this.iconEmoji);
      }
      return this;
    };

    SlackPolice.prototype.excludeList_ = function(sheet, row, column) {
      return sheet.getRange(row, column, sheet.getLastRow()).getValues();
    };

    return SlackPolice;

  })();
  return exports.SlackPolice = SlackPolice;
})(this);
